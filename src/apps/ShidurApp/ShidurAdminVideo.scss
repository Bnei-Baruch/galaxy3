// 1. Last Simple Selector
@function _last-simple-selector($selector) {
$parsed: selector-parse($selector);

    @if length($parsed) > 1 {
    @error '`#{$selector}` contains #{length($parsed)} selectors and the `_last-simple-selector()`function accepts only 1.';
    }
$last-simple-selector: nth(nth($parsed, 1), -1);

    @return $last-simple-selector;
}

// 2. Build Quantity Selector
@function _build-quantity-selector($selector-append, $last-selector) {
$quantity-selector: ();

    @each $s in & {
        $last-simple-selector: '~' + if($last-selector, $last-selector, _last-simple-selector($s));
        $sel: selector-append($s, $selector-append);
        $sel2: selector-nest($sel, $last-simple-selector);
        $quantity-selector: append($quantity-selector, $sel, 'comma');
        $quantity-selector: append($quantity-selector, $sel2 , 'comma');
    }

    @return $quantity-selector;
}

// 6. Exactly
@mixin exactly($count, $selector: null) {
$selector-append: ':nth-last-child(#{$count}):first-child';

    @if type-of($count) != 'number' or not unitless($count) or $count < 1 {
    @error '`#{$count}` is not a valid number for `exactly`';
    }

    @if $selector != null and (type-of($selector) != 'string' or length($selector) > 1) {
    @error '`#{$selector}` is not a valid selector for `exactly`';
    }

$exactly-selector: _build-quantity-selector($selector-append, $selector);


    @at-root #{$exactly-selector} {
    @content;
    }
}

//////////////////////////////////////////////

*, *:before, *:after{
    box-sizing: border-box;
}

.videos-panel {
    display: flex;
    background: #000;
    padding: 1.6em;
    flex: 1 0 100%;
    transition: .2s all linear;

    .vclient--chat-open & {
        flex: 1 0 calc(100% - 400px);
    }
}

.title {
    font-family: "Liberation Serif";
    font-size: 45px;
    text-align: right;
    margin-bottom: .1em;
    margin-top: .2em;
    span {
        display: inline-block;
        background: blue;
        line-height: 1.1em;
        color: white;
        padding: 0 .7em;
    }
}
.videos{
    flex: 1 0 auto;
    position:relative;
&__wrapper {
     position:absolute;
     display: grid;
     grid-template-columns: repeat( 12,  1fr );
     grid-template-rows: repeat(6, percentage(1/6));
     overflow: hidden;
     height: 100%;
     width: 100%;
 }
}

.video {
video {
    object-fit: contain;
    width: 100%;
    height: 100%;
}
@include exactly(1){
    grid-area: 1 / 1 / 7 / 13;
}
@include exactly(2){
&:nth-child(1){grid-area: 1 / 1 / 7 / 7;}
&:nth-child(2){grid-area: 1 / 7 / 7 / 13;}
}
@include exactly(3){
&:nth-child(1){grid-area: 1 / 1 / 4 / 7;}
&:nth-child(2){grid-area: 1 / 7 / 4 / 13;}
&:nth-child(3){grid-area: 4 / 1 / 7 / 13;}
}
@include exactly(4){
&:nth-child(1){grid-area: 1 / 1 / 4 / 7;}
&:nth-child(2){grid-area: 1 / 7 / 4 / 13;}
&:nth-child(3){grid-area: 4 / 1 / 7 / 7;}
&:nth-child(4){grid-area: 4 / 7 / 7 / 13;}
}
@include exactly(5){
&:nth-child(1){grid-area: 1 / 1 / 4 / 5;}
&:nth-child(2){grid-area: 1 / 5 / 4 / 9;}
&:nth-child(3){grid-area: 1 / 9 / 4 / 13;}
&:nth-child(4){grid-area: 4 / 1 / 7 / 7;}
&:nth-child(5){grid-area: 4 / 7 / 7 / 13;}
}
@include exactly(6){
&:nth-child(1){grid-area: 1 / 1 / 4 / 5;}
&:nth-child(2){grid-area: 1 / 5 / 4 / 9;}
&:nth-child(3){grid-area: 1 / 9 / 4 / 13;}
&:nth-child(4){grid-area: 4 / 1 / 7 / 5;}
&:nth-child(5){grid-area: 4 / 5 / 7 / 9;}
&:nth-child(6){grid-area: 4 / 9 / 7 / 13;}
}
@include exactly(7){
&:nth-child(1){grid-area: 1 / 1 / 3 / 5;}
&:nth-child(2){grid-area: 1 / 5 / 3 / 9;}
&:nth-child(3){grid-area: 1 / 9 / 3 / 13;}
&:nth-child(4){grid-area: 3 / 1 / 5 / 5;}
&:nth-child(5){grid-area: 3 / 5 / 5 / 9;}
&:nth-child(6){grid-area: 3 / 9 / 5 / 13;}
&:nth-child(7){grid-area: 5 / 1 / 7 / 13;}
}
@include exactly(8){
&:nth-child(1){grid-area: 1 / 1 / 3 / 5;}
&:nth-child(2){grid-area: 1 / 5 / 3 / 9;}
&:nth-child(3){grid-area: 1 / 9 / 3 / 13;}
&:nth-child(4){grid-area: 3 / 1 / 5 / 5;}
&:nth-child(5){grid-area: 3 / 5 / 5 / 9;}
&:nth-child(6){grid-area: 3 / 9 / 5 / 13;}
&:nth-child(7){grid-area: 5 / 1 / 7 / 7;}
&:nth-child(8){grid-area: 5 / 7 / 7 / 13;}
}
@include exactly(9){
&:nth-child(1){grid-area: 1 / 1 / 3 / 5;}
&:nth-child(2){grid-area: 1 / 5 / 3 / 9;}
&:nth-child(3){grid-area: 1 / 9 / 3 / 13;}
&:nth-child(4){grid-area: 3 / 1 / 5 / 5;}
&:nth-child(5){grid-area: 3 / 5 / 5 / 9;}
&:nth-child(6){grid-area: 3 / 9 / 5 / 13;}
&:nth-child(7){grid-area: 5 / 1 / 7 / 5;}
&:nth-child(8){grid-area: 5 / 5 / 7 / 9;}
&:nth-child(9){grid-area: 5 / 9 / 7 / 13;}
}
@include exactly(10){
&:nth-child(1){grid-area: 1 / 1 / 3 / 4;}
&:nth-child(2){grid-area: 1 / 4 / 3 / 7;}
&:nth-child(3){grid-area: 1 / 7 / 3 / 10;}
&:nth-child(4){grid-area: 1 / 10 / 3 / 13;}
&:nth-child(5){grid-area: 3 / 1 / 5 / 5;}
&:nth-child(6){grid-area: 3 / 5 / 5 / 9;}
&:nth-child(7){grid-area: 3 / 9 / 5 / 13;}
&:nth-child(8){grid-area: 5 / 1 / 7 / 5;}
&:nth-child(9){grid-area: 5 / 5 / 7 / 9;}
&:nth-child(10){grid-area: 5 / 9 / 7 / 13;}
}
@include exactly(11){
&:nth-child(1){grid-area: 1 / 1 / 3 / 4;}
&:nth-child(2){grid-area: 1 / 4 / 3 / 7;}
&:nth-child(3){grid-area: 1 / 7 / 3 / 10;}
&:nth-child(4){grid-area: 1 / 10 / 3 / 13;}
&:nth-child(5){grid-area: 3 / 1 / 5 / 4;}
&:nth-child(6){grid-area: 3 / 4 / 5 / 7;}
&:nth-child(7){grid-area: 3 / 7 / 5 / 10;}
&:nth-child(8){grid-area: 3 / 10 / 5 / 13;}
&:nth-child(9){grid-area: 5 / 1 / 7 / 5;}
&:nth-child(10){grid-area: 5 / 5 / 7 / 9;}
&:nth-child(11){grid-area: 5 / 9 / 7 / 13;}
}
@include exactly(12){
&:nth-child(1){grid-area: 1 / 1 / 3 / 4;}
&:nth-child(2){grid-area: 1 / 4 / 3 / 7;}
&:nth-child(3){grid-area: 1 / 7 / 3 / 10;}
&:nth-child(4){grid-area: 1 / 10 / 3 / 13;}
&:nth-child(5){grid-area: 3 / 1 / 5 / 4;}
&:nth-child(6){grid-area: 3 / 4 / 5 / 7;}
&:nth-child(7){grid-area: 3 / 7 / 5 / 10;}
&:nth-child(8){grid-area: 3 / 10 / 5 / 13;}
&:nth-child(9){grid-area: 5 / 1 / 7 / 4;}
&:nth-child(10){grid-area: 5 / 4 / 7 / 7;}
&:nth-child(11){grid-area: 5 / 7 / 7 / 10;}
&:nth-child(12){grid-area: 5 / 10 / 7 / 13;}
}
}