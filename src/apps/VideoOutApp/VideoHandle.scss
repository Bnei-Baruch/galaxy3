@use "sass:math";

.vclient {
  width: 100vw;
  height: 100vh;
  display: flex;
  flex-direction: column;
  .room-selection {
    border-radius:.28571429rem 0 0 .28571429rem!important;
  }

  &__main {
    flex: 1 0 auto;
    display: flex;
    position: relative;
  }

  &__main-wrapper {
    position: absolute;
    height: 100%;
    width: 100%;
    display: flex;
  }

}


*,
*:before,
*:after {
  box-sizing: border-box;
}

.title {
  font-family: "Liberation Serif";
  font-size: 45px;
  text-align: right;
  margin-bottom: .1em;
  margin-top: .2em;

  span {
    display: inline-block;
    background: blue;
    line-height: 1.1em;
    color: white;
    padding: 0 .7em;
  }
}


.video {
  position: relative;
  border:2px solid black;
  // margin: -2px 0 -2px 0;
  border-width: 2px 0 0 2px;
  &:last-child {
    &:after{
      content:"";
      position: absolute;
      left:100%;
      top:0;
      background: black;
      height: 100%;
      width: 2px;
    }
  }
  &__overlay {
    position: absolute;
    width: 100%;
    height: 100%;
    z-index: 1;

    &.talk-frame {
      border: 4px solid rgba(yellow, .6);
    }
  }

  .nowebcam {
    top: 0;
    position: absolute;
    fill: #fff;
    font-family: Icons;
    font-size: .8rem;
    object-fit: contain;
    width: 100%;
    height: 100%;
  }

  .question {
    &:before {
      display: block;
      content: "";
      padding-top: 100%;
    }

    position: absolute;
    top:50%;
    left:50%;
    transform: translate(-50%, -50%);
    max-width: 30%;
    width: 400px;
    min-width: 60px;
    background:rgba(34, 34, 34, .9);
    border-radius: 10%;
    border: 6px solid white;
    // animation: blinker 1s linear infinite;
    font-family: Icons;

    svg {
      position: absolute;
      top: 0;
      left: 0;
      font-size: 2.5rem;
      fill: white;
    }

  }

  &__title {
    position: absolute;
    bottom: 0;
    left: 0;
    padding: .7rem 1rem;
    background: rgba(34, 34, 34, .9);
    font-size: 1rem;
    color: white;
    // border-radius: 4px;
    line-height: 1;
    text-shadow: 0 2px 1px rgba(0, 0, 0, .7);

    .icon {
      margin-right: .7rem;
      position: relative;
      top: -.09rem;
    }

    // color:yellow;
  }

  video {
    object-fit: contain;
    width: 100%;
    height: 100%;
  }
}

$vw : 16;
$vh: 9;


@keyframes blinker {
  50% {
    opacity: 0;
  }
}

.videos-panel .videos__wrapper {
  position: absolute;
  top: 0;
  right: 2px;
  bottom: 2px;
  left: 0;
  background: rgba(34, 34, 34, 1);
  display:flex !important;  // Override VirtualApp grid
  flex-wrap: wrap-reverse;
  grid-auto-flow: initial !important;  // Reset VirtualApp grid
  gap: normal !important;  // Reset VirtualApp gap
  overflow: hidden !important;  // Keep videos within room bounds
  
  &:before {
    content:"";
    position: absolute;
    width:100%;
    height:100%;
    border:2px solid black;
    border-width: 2px 0 0 2px;
  }
  
  .video_full &{
    justify-content: center;
    
    // In fullscreen mode with a group, scale everything up proportionally
    &.has-group {
      .video--group {
        width: 1458px !important;  // Double the normal size (729px * 2)
        height: 820px !important;  // Double the normal size (410px * 2)
        flex: 0 0 100% !important;
        
        // When there are multiple groups in fullscreen, make them fit side by side
        &.video--group--multiple {
          width: 726px !important;  // (1458px - 2px gap) / 2
          height: 408px !important; // 726px * 9 / 16
          flex: 0 0 726px !important;
        }
      }
      
      // Smaller regular users to fit below title and group
      .video:not(.video--group) {
        width: 177px !important;  // Width for 100px height at 16:9 ratio
        height: 100px !important;
        flex: 0 0 177px !important;
      }
    }
  }
  
  // When there's a group, use different layout
  &.has-group {
    flex-wrap: wrap;
    gap: 2px !important;  // Override the normal reset above
    align-content: flex-start;
    justify-content: center;  // Center all videos horizontally
    
    // Disable .no-of-videos- sizing for group rooms
    .video {
      flex: initial !important;
      height: auto !important;
    }
    
    // Fixed size for group videos (16:9 aspect ratio)
    // Adjusted to fit in available space (typically ~540px height per quad)
    .video--group {
      width: 729px;
      height: 410px !important; // Added 50px to use available space
      flex: 0 0 100% !important;  // Take full width to force line break
      margin-left: auto;
      margin-right: auto;
      
      // When there are multiple groups, make them smaller to fit side by side
      &.video--group--multiple {
        width: 363px !important;  // (729px - 2px gap) / 2
        height: 204px !important; // 363px * 9 / 16
        flex: 0 0 363px !important; // Allow side by side
      }
    }
    
    // If there's only the group video (no other visible users), make it fill the space
    // Note: :only-child doesn't work when there are hidden videos, so we handle this in JS
    .video--group.video--alone {
      width: 100% !important;
      height: 100% !important;
      flex: 1 1 auto !important;
      margin: 0 !important;
    }
    
    // Fixed size for regular videos when there's a group in the room (16:9 aspect ratio)
    .video:not(.video--group) {
      width: 200px;
      height: calc(200px * 9 / 16) !important; // 112.5px
      flex: 0 0 200px !important;
    }
  }
}
.no-of-videos- {
  &1 {
    .video {flex: 0 0 percentage(math.div(1, 1));}
  }
  &2, &3, &4 {
    .video {flex: 0 0 calc(50% - 1px);}
  }
  &5, &6, &7, &8, &9 {
    .video {flex: 0 0 calc(33.3333% - 2px);}
  }
  &10, &11, &12, &13, &14, &15, &16 {
    .video {flex: 0 0 calc(25% - 2px);}
  }
  &17, &18, &19, &20, &21, &22, &23, &24, &25 {
    .video {flex: 0 0 calc(20% - 2px);}
  }
  // ---------------
  &1, &2 {
    .video {height: percentage(math.div(1, 1));}
  }
  &3, &4, &5, &6 {
    .video {height: percentage(1*0.5);}
  }
  &7, &8, &9, &10, &11, &12 {
    .video {height: percentage(math.div(1, 3));}
  }
  &13, &14, &15, &16, &17, &18, &19, &20{
    .video {height: percentage(1*0.25);}
  }
  &21, &22, &23, &24, &25{
    .video {height: percentage(1*0.2);}
  }
}
