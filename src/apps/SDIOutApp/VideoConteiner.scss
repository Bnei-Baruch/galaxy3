// 1. Last Simple Selector
@function _last-simple-selector($selector) {
$parsed: selector-parse($selector);

    @if length($parsed) > 1 {
    @error '`#{$selector}` contains #{length($parsed)} selectors and the `_last-simple-selector()`function accepts only 1.';
    }
$last-simple-selector: nth(nth($parsed, 1), -1);

    @return $last-simple-selector;
}

// 2. Build Quantity Selector
@function _build-quantity-selector($selector-append, $last-selector) {
$quantity-selector: ();

    @each $s in & {
        $last-simple-selector: '~' + if($last-selector, $last-selector, _last-simple-selector($s));
        $sel: selector-append($s, $selector-append);
        $sel2: selector-nest($sel, $last-simple-selector);
        $quantity-selector: append($quantity-selector, $sel, 'comma');
        $quantity-selector: append($quantity-selector, $sel2 , 'comma');
    }

    @return $quantity-selector;
}

// 6. Exactly
@mixin exactly($count, $selector: null) {
$selector-append: ':nth-last-child(#{$count}):first-child';

    @if type-of($count) != 'number' or not unitless($count) or $count < 1 {
    @error '`#{$count}` is not a valid number for `exactly`';
    }

    @if $selector != null and (type-of($selector) != 'string' or length($selector) > 1) {
    @error '`#{$selector}` is not a valid selector for `exactly`';
    }

$exactly-selector: _build-quantity-selector($selector-append, $selector);


    @at-root #{$exactly-selector} {
    @content;
    }
}

//////////////////////////////////////////////

*, *:before, *:after{
    box-sizing: border-box;
}

.title {
    font-family: "Liberation Serif";
    font-size: 45px;
    text-align: right;
    margin-bottom: .1em;
    margin-top: .2em;
    span {
      position: relative;
        display: inline-block;
        background: blue;
        line-height: 1.1em;
        color: white;
        padding: 0 .2em;
        right: 60px;
    }
}
.videos{
    flex: 1 0 auto;
    position:relative;
    // margin: -1px;
&__wrapper {
     position:absolute;
     display: grid;
     grid-template-columns: repeat( 24,  1fr );
     grid-template-rows: repeat(12, percentage(1/12));
     overflow: hidden;
     height: 100%;
     width: 100%;
 }
}

.video {
    position: relative;
    // margin: 1px;
    background: rgba(34, 34, 34, 1);
    border: 2px solid #000;
    overflow:hidden;
    &__overlay {
        position: absolute;
        width: 100%;
        height: 100%;
        z-index: 1;
        &.talk{
            border:4px solid rgba(yellow,.6);
        }
    }
    .question {
        position: absolute;
        left:50%;
        top:50%;
        transform: translate(-50%,-50%);
       background: rgba(34, 34, 34, .5); 
       border-radius: 50%;
       //animation: ani 1s ease-in-out infinite alternate;
    //    animation-timing-function:;
       padding:1rem;
       .icon {
           margin:0!important;
        //    padding:0!important;
        // text-shadow: 0 2px 1px rgba(0,0,0,.3);
        color: rgba(255,255,255,1);
           width:auto;
           height:auto;
           
       }
    }
    
    &__title {
        position: absolute;
        bottom: 0;
        left: 0;
        padding: .7rem 1rem;
        background:rgba(34, 34, 34, .9);
        font-size: 1.4rem;
        color:white;
        // border-radius: 4px;
        line-height: 1;
        text-shadow: 0 2px 1px rgba(0,0,0,.7);
        .icon{
            margin-right:1rem;
            position: relative;
            top: -.09rem;
        }
        // color:yellow;
    }
video {
    object-fit: contain;
    width: 100%;
    height: 100%;
}
@include exactly(1){
    grid-column-end: span 24;
   grid-row-end: span 12;
 }
 @include exactly(2){
   grid-column-end: span 12;
   grid-row-end: span 12;
 }
 @include exactly(3){
   grid-column-end: span 12;
   grid-row-end: span 6;
   &:nth-child(3){grid-column-start: 7;}
 }
 @include exactly(4){
   grid-column-end: span 12;
   grid-row-end: span 6;
 }
 @include exactly(5){
   grid-column-end: span 8;
   grid-row-end: span 6;
   &:nth-child(4){grid-column-start: 5;}
 }
 @include exactly(6){
   grid-column-end: span 8;
   grid-row-end: span 6;
 }
 @include exactly(7){
   grid-column-end: span 8;
   grid-row-end: span 4;
   &:nth-child(7){grid-column-start: 9;}
 }
 @include exactly(8){
   grid-column-end: span 8;
   grid-row-end: span 4;
   &:nth-child(7){grid-column-start: 5;}
 }
 @include exactly(9){
   grid-column-end: span 8;
   grid-row-end: span 4;
 }
 @include exactly(10){
   grid-column-end: span 6;
   grid-row-end: span 4;
   &:nth-child(9){grid-column-start: 7;}
 }
 @include exactly(11){
   grid-column-end: span 6;
   grid-row-end: span 4;
   &:nth-child(9){grid-column-start: 4;}
 }
 @include exactly(12){
   grid-column-end: span 6;
   grid-row-end: span 4;
 }
@include exactly(13){
    grid-column-end: span 6;
    grid-row-end: span 3;
    &:nth-child(13){grid-column-start: 10;}

}
@include exactly(14){
    grid-column-end: span 6;
    grid-row-end: span 3;
    &:nth-child(13){grid-column-start: 7;}

}
@include exactly(15){
    grid-column-end: span 6;
    grid-row-end: span 3;
    &:nth-child(13){grid-column-start: 4;}

}
@include exactly(16){
    grid-column-end: span 6;
    grid-row-end: span 3;
    

}
}

@keyframes ani {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
    // 100% {
    //   opacity: .5;
    // }
  }
  